export class EnzymeAdapter {
    static MODES: {
        MOUNT: string;
        SHALLOW: string;
        STRING: string;
    };
    options: any;
    createElement(type: any, props: any): void;
    createRenderer(options: any): void;
    invokeSetStateCallback(instance: any, callback: any): void;
    isValidElement(element: any): void;
    matchesElementType(node: any, matchingType: any): any;
    nodeToElement(node: any): void;
}
export class ReactWrapper {
    constructor(nodes: any, root: any, ...args: any[]);
    at(index: any): any;
    childAt(index: any): any;
    children(selector: any): any;
    closest(selector: any): any;
    contains(nodeOrNodes: any): any;
    containsAllMatchingElements(nodes: any): any;
    containsAnyMatchingElements(nodes: any): any;
    containsMatchingElement(node: any): any;
    context(name: any): any;
    debug(...args: any[]): any;
    detach(): void;
    equals(node: any): any;
    every(selector: any): any;
    everyWhere(predicate: any): any;
    exists(...args: any[]): any;
    filter(selector: any): any;
    filterWhere(predicate: any): any;
    find(selector: any): any;
    findWhere(predicate: any): any;
    first(): any;
    flatMap(fn: any): any;
    forEach(fn: any): any;
    get(index: any): any;
    getDOMNode(): any;
    getElement(): any;
    getElements(): any;
    getNode(): void;
    getNodeInternal(): any;
    getNodes(): void;
    getNodesInternal(): any;
    getWrappingComponent(): any;
    hasClass(className: any): any;
    hostNodes(): any;
    html(): any;
    instance(): any;
    invoke(propName: any): any;
    is(selector: any): any;
    isEmpty(): any;
    isEmptyRender(): any;
    key(): any;
    last(): any;
    map(fn: any): any;
    matchesElement(node: any): any;
    mount(): any;
    name(): any;
    not(selector: any): any;
    parent(): any;
    parents(selector: any): any;
    prop(propName: any): any;
    props(): any;
    reduce(fn: any, ...args: any[]): any;
    reduceRight(fn: any, ...args: any[]): any;
    ref(refname: any): any;
    render(): any;
    renderProp(propName: any): any;
    root(): any;
    setContext(context: any): any;
    setProps(props: any, ...args: any[]): any;
    setState(state: any, ...args: any[]): any;
    simulate(event: any, ...args: any[]): any;
    simulateError(error: any): any;
    single(name: any, fn: any): any;
    slice(begin: any, end: any): any;
    some(selector: any): any;
    someWhere(predicate: any): any;
    state(name: any): any;
    tap(intercepter: any): any;
    text(): any;
    type(): any;
    unmount(): any;
    update(): any;
    wrap(node: any, ...args: any[]): any;
}
export class ShallowWrapper {
    constructor(nodes: any, root: any, ...args: any[]);
    at(index: any): any;
    childAt(index: any): any;
    children(selector: any): any;
    closest(selector: any): any;
    contains(nodeOrNodes: any): any;
    containsAllMatchingElements(nodes: any): any;
    containsAnyMatchingElements(nodes: any): any;
    containsMatchingElement(node: any): any;
    context(name: any): any;
    debug(...args: any[]): any;
    dive(...args: any[]): any;
    equals(node: any): any;
    every(selector: any): any;
    everyWhere(predicate: any): any;
    exists(...args: any[]): any;
    filter(selector: any): any;
    filterWhere(predicate: any): any;
    find(selector: any): any;
    findWhere(predicate: any): any;
    first(): any;
    flatMap(fn: any): any;
    forEach(fn: any): any;
    get(index: any): any;
    getElement(): any;
    getElements(): any;
    getNode(): void;
    getNodeInternal(): any;
    getNodes(): void;
    getNodesInternal(): any;
    getWrappingComponent(): any;
    hasClass(className: any): any;
    hostNodes(): any;
    html(): any;
    instance(): any;
    invoke(propName: any): any;
    is(selector: any): any;
    isEmpty(): any;
    isEmptyRender(): any;
    key(): any;
    last(): any;
    map(fn: any): any;
    matchesElement(node: any): any;
    name(): any;
    not(selector: any): any;
    parent(): any;
    parents(selector: any): any;
    prop(propName: any): any;
    props(): any;
    reduce(fn: any, ...args: any[]): any;
    reduceRight(fn: any, ...args: any[]): any;
    render(): any;
    renderProp(propName: any): any;
    rerender(props: any, context: any): any;
    root(): any;
    setContext(context: any): any;
    setProps(props: any, ...args: any[]): any;
    setState(state: any, ...args: any[]): any;
    shallow(options: any): any;
    simulate(event: any, ...args: any[]): any;
    simulateError(error: any): any;
    single(name: any, fn: any): any;
    slice(begin: any, end: any): any;
    some(selector: any): any;
    someWhere(predicate: any): any;
    state(name: any): any;
    tap(intercepter: any): any;
    text(): any;
    type(): any;
    unmount(): any;
    update(): any;
    wrap(node: any, ...args: any[]): any;
}
export function configure(extra: any): void;
export function mount(node: any): any;
export function render(node: any, ...args: any[]): any;
export function shallow(node: any): any;
